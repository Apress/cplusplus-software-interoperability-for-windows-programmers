// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// excess_kurtosis
double excess_kurtosis(Rcpp::NumericVector data);
RcppExport SEXP _StatsR_excess_kurtosis(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(excess_kurtosis(data));
    return rcpp_result_gen;
END_RCPP
}
// get_descriptive_statistics
std::unordered_map<std::string, double> get_descriptive_statistics(Rcpp::NumericVector data, Rcpp::CharacterVector keys);
RcppExport SEXP _StatsR_get_descriptive_statistics(SEXP dataSEXP, SEXP keysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type keys(keysSEXP);
    rcpp_result_gen = Rcpp::wrap(get_descriptive_statistics(data, keys));
    return rcpp_result_gen;
END_RCPP
}
// linear_regression
std::unordered_map<std::string, double> linear_regression(Rcpp::NumericVector xs, Rcpp::NumericVector ys);
RcppExport SEXP _StatsR_linear_regression(SEXP xsSEXP, SEXP ysSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type xs(xsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ys(ysSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_regression(xs, ys));
    return rcpp_result_gen;
END_RCPP
}
// t_test_summary_data
std::unordered_map<std::string, double> t_test_summary_data(double mu0, double mean, double sd, double n);
RcppExport SEXP _StatsR_t_test_summary_data(SEXP mu0SEXP, SEXP meanSEXP, SEXP sdSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(t_test_summary_data(mu0, mean, sd, n));
    return rcpp_result_gen;
END_RCPP
}
// t_test_one_sample
std::unordered_map<std::string, double> t_test_one_sample(double mu0, Rcpp::NumericVector x1);
RcppExport SEXP _StatsR_t_test_one_sample(SEXP mu0SEXP, SEXP x1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x1(x1SEXP);
    rcpp_result_gen = Rcpp::wrap(t_test_one_sample(mu0, x1));
    return rcpp_result_gen;
END_RCPP
}
// t_test_two_sample
std::unordered_map<std::string, double> t_test_two_sample(Rcpp::NumericVector x1, Rcpp::NumericVector x2);
RcppExport SEXP _StatsR_t_test_two_sample(SEXP x1SEXP, SEXP x2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x2(x2SEXP);
    rcpp_result_gen = Rcpp::wrap(t_test_two_sample(x1, x2));
    return rcpp_result_gen;
END_RCPP
}
// library_version
String library_version();
RcppExport SEXP _StatsR_library_version() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(library_version());
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_StatsTests();

static const R_CallMethodDef CallEntries[] = {
    {"_StatsR_excess_kurtosis", (DL_FUNC) &_StatsR_excess_kurtosis, 1},
    {"_StatsR_get_descriptive_statistics", (DL_FUNC) &_StatsR_get_descriptive_statistics, 2},
    {"_StatsR_linear_regression", (DL_FUNC) &_StatsR_linear_regression, 2},
    {"_StatsR_t_test_summary_data", (DL_FUNC) &_StatsR_t_test_summary_data, 4},
    {"_StatsR_t_test_one_sample", (DL_FUNC) &_StatsR_t_test_one_sample, 2},
    {"_StatsR_t_test_two_sample", (DL_FUNC) &_StatsR_t_test_two_sample, 2},
    {"_StatsR_library_version", (DL_FUNC) &_StatsR_library_version, 0},
    {"_rcpp_module_boot_StatsTests", (DL_FUNC) &_rcpp_module_boot_StatsTests, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_StatsR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
